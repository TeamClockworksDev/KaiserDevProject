C# cheat sheet
Written by Nick West

COMMENTS________________________________________________________________________________________________________________

Before learning anything about how to code you should know how "commenting" code works.
At any time in your script you can type // before a line to "comment out" text. This will make the
computer ignore any text written after the slashes. You can also type /* to start a comment and */ to end a comment.
You can tell if something is a comment by how it's colored. Usually comments will be green.
Comments are very important because they can let you know what you were thinking when you initially wrote a script.
They make debugging much easier.

Examples:

// This is a comment

if( /*The text inside this if statement will be ignored because we've commented out all of the text in it*/ )


NAMESPACES________________________________________________________________________________________________________________

At the very top of a script you'll usually see text like this:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

Namespaces tell the computer what functions a script is allowed to use. 

By typing "using UnityEngine;" at the top of a script
you're telling the computer that this script has access to all of the basic unity functions, like moving objects around.
Usually namespaces will be autogenerated whenever you make a new script, but sometimes you'll have to add them.
For example, UnityEngine.UI isn't added by default.

SEMICOLONS________________________________________________________________________________________________________________

In the namespaces section you might have noticed that we type a ";" after every line. In C# anytime you write a command
you'll need to follow it with a semicolon. It will tell the computer when the command is finished. 
Think of it like a period at the end of a sentence.

CLASSES___________________________________________________________________________________________________________________

When writing a script all of your code will be contained in something called a class. You'll see an autogenerated class
right after the namespaces section of your code:

public class MyClass : MonoBehaviour
{

}

There are really only 3 parts of this structure that you need to understand:

1. 	The word "public" is used to tell the computer whether or not other scripts you write can access this class.
	You can remove this word and the class will still function, but nothing will be able to access it.
	You can also change this word to "private" which is a similar but different way to do the same thing.

2.	This class type is set to "MonoBehavior". This is a type specific to Unity which allows your script to appear in the 
	unity editor. There are other types but you won't be changing this alot.

3.	Curly brackets "{}". In any body of code, curly brackets are used to tell the computer when that body begins and ends.
	Anything in the brackets is part of your class. Anything outside is not.


VARIABLES___________________________________________________________________________________________________________________

To do anything in a script you'll need to store and manipulate data. This data comes in the form of variables. 
Variables can be declared anywhere in your script but usually they are declared at the top. You can declare a variable
the same way you declare a class:

public int myVariable = 0;

This variable is public, it's an integer (which means it's a number) and to access it you type the word "myVariable"
When we declared it we set the number equal to 0. If we ask the program what number this variable is storing it will read back
the number zero. We also end it with a semicolon because we just made a statement.

Keep in mind that the "public" part of this declaration only needs to be there if the variable is declared at the top of the script.
If you declare it anywhere else, writing public or private will give you an error.

There are lots of variable types, but here are the main ones you need to know:

BOOLS:
A bool is the simplest type of variable. It can either be set to true or false.

public bool myVariable = true;

INTEGERS:
These variables store whole numbers but can't be set to anything with a decimal in it.

public int myVariable = 0;

FLOATS:
These are floating point numbers. They are used to store any type of number with a decimal in it.
When setting them to something you have to type an f after the number or else the program will error out.

public float myVariable = 0.5f;

STRINGS:
Strings are used to store lines of text. When setting them to something you'll need to put the text in "quotes";

public string myVariable = "This is a string";

VECTORS:

Vectors are used to store coordinates. Think of them as 3 floats stored in 1 variable.
public Vector3 myVariable = new Vector3(0f, 0f, 0f);

EVERYTHING ELSE:

Just about every type of scriptable object in a game can be declared as a variable.
For example, lets say we wrote another script called MyOtherScript.

If we wanted to we could create an instance of that script in our current script and control it from here.

public MyOtherScript whoaDude;

Of course this will only work if there's actually a script in your project named MyOtherScript.


FUNCTIONS___________________________________________________________________________________________________________________

A function is a block of code that does something. It can be anything really. All functions are declared inside your class.

public void MyFunction()
{
	// Code goes here
}

Just like classes and variables, you need to tell the computer if the function is public or private.
This is followed by the function's return type, which I'll elaborate on later. This function's return type is "void"
which means it won't be returning anything. Most of your functions will be like this.
Then you give the function a name just like how we did with variables. 

Next you type some parenthesis. These can be used to pass data into a function. To use them you might type something like this:

public void MyFunction(int myNum)
{
	// Code goes here
}

Now whenever we call this function we'll have to give it an integer. The function can then do something with that integer.
Just like when we set up our class we'll need to surround the function with curly brackets. This tells the computer when
this body of code begins and ends. Anything in the brackets is part of the function. Anything outside isn't.

It might look like you can call a function anything, but there are some names that are off limits. Some function names 
will automatically do certain things. For example:

public void Start()
{
	// Anything called start will be run at the beginning of the game.
}

public void Update()
{
	// Anything called Update will be run every single frame.
	// Keep in mind that Update will run at different speeds depending on the computer
	// your code is being run on.
}

public void FixedUpdate()
{
	// Anything called here will get run at a fixed time interval. It's just like Update
	// but the timing is more consistant.
	// Do not use it to call movements of any kind. They'll be choppy because 
	// FixedUpdate isn't called every frame like Update is.
}

There are plenty of other function names that Unity uses but these are the main ones you'll be using.

CALLING A FUNCTION:

To actually make a function do something you'll need to call it.

public void Update()
{
	// This statement calls MyCoolFunction, which is a function I've written just below Update.
	// It's being called in Update, which means that any code in MyCoolFunction will get called every frame.
	MyCoolFunction();

	// This statement calls MyCoolOtherFunction. That function needs to be given an integer.
	// So I've typed a 1 in the parenthesis.
	MyCoolOtherFunction(1);
	
	// This statement calls TheCoolestFunction. To call that one we need to give it an integer, a string, and a bool.
	TheCoolestFunction(1, "Hello", true);
}

public void MyCoolFunction()
{

}

public void MyCoolOtherFunction(int num)
{

}

public void TheCoolestFunction(int num, string st, bool what)
{

}


IF STATEMENTS___________________________________________________________________________________________________________________

If statements are used to check if the conditions for an action have been met.

bool myBool = false;

if(myBool == true)
{
	// Put some code here
}

In this hypothetical script we have a bool. If that bool is set to true any code in the if statement will be run.
Just like functions and classes everything in an if statement is surrounded by curly brackets. Anything in the brackets
is part of the if statement. Anything outside is not.

But what if we wanted to do something else if myBool is false?
We could type something like this:

if(myBool == true)
{
	// Put some code here
}
if(myBool == false)
{
	// Put some other code here
}

But there's a second part to an if statement: Else. Instead of creating another if statement we can do it this way:

if(myBool == true)
{
	// Put some code here
}
else
{
	// Put some other code here
}

What if we have multiple variables in our script and we only want an if statement to be true if all of those variables 
are equal to specific values? To do that you type &&. && means AND.

bool myBool = false;
string myString = "what";
int myInt = 2;

if(myBool == false && myInt == 1 && myString == "what")
{
	// This code will only be run if:
	// myBool is true
	// myInt is 1
	// and myString is "what"
}

What if 2 things could happen in your code and you want an if statement to be true if either of those things happens?
Use || in the statement. || means OR.

bool myBool = true;
bool mySecondBool = false;

if(myBool == true || mySecondBool == false)
{
	// This code will be run if myBool is true or if mySecondBool is false.
}

You might have noticed that whenever we type "=" in an if statement we type 2 of them instead of 1.
2 equals signs or "==" stands for comparative equals. This tells the computer that we're comparing these 2 values.
We aren't setting one to the other. 

So what happens if we don't use comparative equals in an if statement?

if(myBool = true || mySecondBool = false)
{
	// By not using comparative equals, we're setting myBool to true and mySecondBool to false.
	// This means that the if statement will always be true.
	// Don't do this.
}

PUTTING IT ALL TOGETHER___________________________________________________________________________________________________________________

// First we declare the namespaces we're using
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

// Then we define our class
public class MyClass : MonoBehaviour
{
	// We declare all of the variables we'll be using in this script
	public bool myBool = false;
	public string myString = "what";
	public int myInt = 2;

	// Updates is run every frame
	public void Update()
	{
		// We check to see if myBool is true. If it is, we call MyCoolFunction
		if(myBool == true)
		{
			MyCoolFunction();
		}

	}
	public void MyCoolFunction()
	{
		// And that's all there is to it.
		// ...Well not everything, but this should be enough to get you started. 
	}
}




